// Code generated by vfsgen; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 11, 14, 9, 18, 54, 267143434, time.UTC),
		},
		"/asset_generate.go": &vfsgen۰CompressedFileInfo{
			name:             "asset_generate.go",
			modTime:          time.Date(2019, 11, 14, 9, 19, 10, 663897251, time.UTC),
			uncompressedSize: 321,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8e\xb1\x4a\x03\x31\x18\xc7\xe7\x7c\x4f\xf1\x99\xe9\x0e\x24\xb7\x0b\xdd\xa4\x2e\x82\x83\x0f\x20\xf1\x4c\xd2\x60\x2e\x39\x92\xb4\x20\xa5\x5b\x27\xad\x38\xb4\x42\x87\x3b\x50\x10\x14\xe7\x8e\xfa\x44\x49\xdf\x41\xea\xe9\xfa\xfb\xbe\x3f\xbf\x5f\xcb\xeb\x5b\xae\x04\x36\x5c\x5b\x00\xdd\xb4\xce\x47\x2c\x80\x50\xe3\x14\x05\x42\xad\x88\xd5\x24\xc6\x96\x02\x10\xaa\x74\x9c\x4c\xaf\x59\xed\x9a\x2a\x4c\xa6\xbe\x76\xee\xbc\x9a\xc9\xa0\x84\xa5\x50\x02\x54\x15\xf2\x10\x44\x0c\xb8\x7f\xda\xa5\xc7\x4d\xee\xb7\xb8\x7f\xde\xe6\x6e\x89\xe9\xf3\x23\xad\x5f\x70\xbf\x5a\xe5\xfe\x2b\xf7\x4b\x64\xac\x1a\x7e\xaf\x66\x32\xdc\xf0\xc8\x99\x72\x7f\xe7\xf4\xda\x61\x7a\x5f\xa5\x75\x97\xee\x37\x98\xbf\x37\x69\xdd\xe5\x7e\x97\x1e\xde\x18\xc8\xa9\xad\x7f\x5b\x8b\x12\xe7\x40\x66\xdc\xa3\x0c\x78\x08\x64\x63\x6d\xc4\xe5\x5d\x88\xa2\xc1\xd1\x40\x4e\xb5\x2f\xe8\x60\xa1\x25\x10\xe1\x3d\x9e\x8c\x70\x08\x66\x67\xc2\x0a\xcf\xa3\x28\x64\x38\xfe\x67\x17\x6d\xd4\xce\x86\xf9\xa2\x04\xa2\x25\x1e\x06\x47\x23\xb4\xda\x1c\x5c\xc4\x38\xc5\xc6\x3c\x72\x63\x6c\x21\xbc\x2f\x81\x2c\x60\x01\x3f\x01\x00\x00\xff\xff\x7e\xda\x84\x91\x41\x01\x00\x00"),
		},
		"/bootstrap": &vfsgen۰DirInfo{
			name:    "bootstrap",
			modTime: time.Date(2019, 11, 14, 9, 17, 14, 85049378, time.UTC),
		},
		"/css": &vfsgen۰DirInfo{
			name:    "css",
			modTime: time.Date(2019, 11, 14, 9, 17, 44, 631205347, time.UTC),
		},
		"/template": &vfsgen۰DirInfo{
			name:    "template",
			modTime: time.Date(2019, 11, 14, 9, 17, 57, 617868141, time.UTC),
		},
		"/template/index.html": &vfsgen۰FileInfo{
			name:    "index.html",
			modTime: time.Date(2019, 11, 14, 9, 18, 9, 81182254, time.UTC),
			content: []byte("\x7b\x7b\x64\x65\x66\x69\x6e\x65\x20\x22\x69\x6e\x64\x65\x78\x22\x7d\x7d\x0a\x64\x6f\x74\x6f\x72\x69\x0a\x7b\x7b\x65\x6e\x64\x7d\x7d"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/asset_generate.go"].(os.FileInfo),
		fs["/bootstrap"].(os.FileInfo),
		fs["/css"].(os.FileInfo),
		fs["/template"].(os.FileInfo),
	}
	fs["/template"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/template/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
